/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */@import url(node_modules/basscss/css/basscss.css);html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}table{border-collapse:collapse;border-spacing:0}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Demi.eot);src:url(fonts/AvenirNextLTPro-Demi.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Demi.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Demi.woff) format("woff"),url(fonts/AvenirNextLTPro-Demi.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Demi.svg#AvenirNextLTPro-Demi) format("svg");font-weight:400;font-style:normal}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-It.eot);src:url(fonts/AvenirNextLTPro-It.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-It.woff2) format("woff2"),url(fonts/AvenirNextLTPro-It.woff) format("woff"),url(fonts/AvenirNextLTPro-It.ttf) format("truetype"),url(fonts/AvenirNextLTPro-It.svg#AvenirNextLTPro-It) format("svg");font-weight:400;font-style:italic}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-DemiIt.eot);src:url(fonts/AvenirNextLTPro-DemiIt.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-DemiIt.woff2) format("woff2"),url(fonts/AvenirNextLTPro-DemiIt.woff) format("woff"),url(fonts/AvenirNextLTPro-DemiIt.ttf) format("truetype"),url(fonts/AvenirNextLTPro-DemiIt.svg#AvenirNextLTPro-DemiIt) format("svg");font-weight:400;font-style:italic}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Regular.eot);src:url(fonts/AvenirNextLTPro-Regular.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Regular.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Regular.woff) format("woff"),url(fonts/AvenirNextLTPro-Regular.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Regular.svg#AvenirNextLTPro-Regular) format("svg");font-weight:400;font-style:normal}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Bold.eot);src:url(fonts/AvenirNextLTPro-Bold.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Bold.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Bold.woff) format("woff"),url(fonts/AvenirNextLTPro-Bold.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Bold.svg#AvenirNextLTPro-Bold) format("svg");font-weight:700;font-style:normal}.row{width:100%;max-width:1024px;margin:0 auto;position:relative;padding:0 2%}.gigantic{font-size:11rem}.supersize{font-size:8rem}.tera{font-size:6.5rem;margin-bottom:.25385rem}.giga{font-size:5rem;margin-bottom:.33rem}.mega{font-size:4rem;margin-bottom:.4125rem}.alpha{font-size:3.33333rem;margin-bottom:.495rem}.beta{font-size:2.6667rem;margin-bottom:.61875rem}.gamma{font-size:2rem;margin-bottom:.825rem}.delta{font-size:1.3333333333333333rem;margin-bottom:1.2375rem}.epsilon{font-size:1.16667rem;margin-bottom:1.41429rem}.zeta{font-size:1rem;margin-bottom:1.65rem}.montserrat{font-family:Montserrat}@media (min-width:320px){.xs-col{float:left;box-sizing:border-box}.xs-col-right{float:right;box-sizing:border-box}.xs-col-1{width:8.33333%}.xs-col-2{width:16.66667%}.xs-col-3{width:25%}.xs-col-4{width:33.33333%}.xs-col-5{width:41.66667%}.xs-col-6{width:50%}.xs-col-7{width:58.33333%}.xs-col-8{width:66.66667%}.xs-col-9{width:75%}.xs-col-10{width:83.33333%}.xs-col-11{width:91.66667%}.xs-col-12{width:100%}}body,html{height:100%}body{color:#8f8f8f;font-family:Avenir Next LT Pro;font-weight:300;-webkit-font-smoothing:antialiased}.menu-toggle{width:40px;height:30px;position:absolute;top:20px;left:25px;cursor:pointer}.menu-toggle.on .one{-webkit-transform:rotate(45deg) translate(7px,7px);transform:rotate(45deg) translate(7px,7px)}.menu-toggle.on .two{opacity:0}.menu-toggle.on .three{-webkit-transform:rotate(-45deg) translate(8px,-10px);transform:rotate(-45deg) translate(8px,-10px)}.one,.three,.two{width:100%;height:5px;background:#3043a0;margin:6px auto;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition-duration:.3s}nav ul{padding:0;font-family:Open Sans;list-style:none;margin:4em auto;text-align:center}nav ul.hidden{display:none}nav ul a{transition-duration:.5s;text-decoration:none;color:#fff;font-size:3em;line-height:2.5;width:100%;display:block}nav ul a:hover{background-color:rgba(0,0,0,.5)}.menu-section.on{z-index:10;width:100%;height:100%;display:block;background-color:rgba(0,0,0,.9);position:absolute}.hero{overflow:hidden;position:relative}.hero,.hero .alpha-bg{width:100%;height:100%}.hero .alpha-bg{position:absolute;-o-object-fit:cover;object-fit:cover;opacity:.5}.hero .wrapper{max-width:25rem;position:absolute;min-height:100vh;display:flex;align-items:center;justify-content:left}.hero h1{color:#000;font-weight:700;font-size:4rem;margin-left:1.2rem}@media (min-width:33.75em) and (max-width:44.99em){.hero h1{font-size:5rem;margin-left:1.5rem}}@media (min-width:45em) and (max-width:59.99em){.hero h1{font-size:6.5rem;margin-left:2rem}}@media (min-width:60em){.hero h1{font-size:8rem;margin-left:2rem}}.color-emphasis{color:#3043a0}
/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci9fbm9ybWFsaXplLnNjc3MiLCJtYWluLnNjc3MiLCJtYWluLmNzcyIsInZlbmRvci9fcmVzZXQuc2NzcyIsImJhc2UvX2ZvbnRzLnNjc3MiLCJiYXNlL19oZWxwZXJzLnNjc3MiLCJiYXNlL19icmVha3BvaW50cy5zY3NzIiwiYmFzZS9fYmFzZS5zY3NzIiwiY29tcG9uZW50cy9faGVhZGVyLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcGFzcy1taXhpbnMvbGliL2NvbXBhc3MvY3NzMy9fc2hhcmVkLnNjc3MiLCJjb21wb25lbnRzL19oZXJvLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEVBQTRFLEFDSTVFLGtEQUFPLEFETVAsS0FDSSxpQkFBaUIsQUFDakIsNkJBQThCLENBQ2pDLEFBU0QsS0FDSSxRQUFTLENBQ1osQUFPRCxHQUNJLGNBQWMsQUFDZCxjQUFnQixDQUNuQixBQVVELEdBQ0ksdUJBQXVCLEFBQ3ZCLFNBQVMsQUFDVCxnQkFBaUIsQ0FDcEIsQUFPRCxJQUNJLGdDQUFpQyxBQUNqQyxhQUFjLENBQ2pCLEFBU0QsRUFDSSw0QkFBNkIsQ0FDaEMsQUFPRCxZQUNJLG1CQUFtQixBQUNuQiwwQkFBMEIsQUFDMUIseUNBQUEsQUFBaUMsZ0NBQUEsQ0FDcEMsQUFNRCxTQUVJLGtCQUFtQixDQUN0QixBQU9ELGNBR0ksZ0NBQWlDLEFBQ2pDLGFBQWMsQ0FDakIsQUFNRCxNQUNJLGFBQWMsQ0FDakIsQUFPRCxRQUVJLGNBQWMsQUFDZCxjQUFjLEFBQ2Qsa0JBQWtCLEFBQ2xCLHVCQUF3QixDQUMzQixBQUVELElBQ0ksYUFBZSxDQUNsQixBQUVELElBQ0ksU0FBVyxDQUNkLEFBU0QsSUFDSSxpQkFBa0IsQ0FDckIsQUFVRCxzQ0FLSSxvQkFBb0IsQUFDcEIsZUFBZSxBQUNmLGlCQUFpQixBQUNqQixRQUFTLENBQ1osQUFPRCxhQUVJLGdCQUFpQixDQUNwQixBQU9ELGNBRUksbUJBQW9CLENBQ3ZCLEFBTUQsZ0RBSUkseUJBQTBCLENBQzdCLEFBTUQsd0hBSUksa0JBQWtCLEFBQ2xCLFNBQVUsQ0FDYixBQU1ELDRHQUlJLDZCQUE4QixDQUNqQyxBQU1ELFNBQ0ksMEJBQThCLENBQ2pDLEFBU0QsT0FDSSxzQkFBc0IsQUFDdEIsY0FBYyxBQUNkLGNBQWMsQUFDZCxlQUFlLEFBQ2YsVUFBVSxBQUNWLGtCQUFtQixDQUN0QixBQU1ELFNBQ0ksdUJBQXdCLENBQzNCLEFBTUQsU0FDSSxhQUFjLENBQ2pCLEFFcEJELDZCRjZCSSxzQkFBc0IsQUFDdEIsU0FBVSxDQUNiLEFFckJELGtGRjZCSSxXQUFZLENBQ2YsQUV0QkQsY0Y4QkksNkJBQTZCLEFBQzdCLG1CQUFvQixDQUN2QixBRXZCRCx5Q0Y4QkksdUJBQXdCLENBQzNCLEFBT0QsNkJBQ0ksMEJBQTBCLEFBQzFCLFlBQWEsQ0FDaEIsQUFTRCxRQUNJLGFBQWMsQ0FDakIsQUFNRCxRQUNJLGlCQUFrQixDQUNyQixBRXRCRCxrQkZ3Q0ksWUFBYSxDQUNoQixBRy9VRCwyWkFhSSxTQUFTLEFBQ1QsVUFBVSxBQUNWLFNBQVMsQUFDVCxlQUFlLEFBQ2YsYUFBYSxBQUNiLHVCQUF3QixDQUMzQixBQUdELDhFQUVJLGFBQWMsQ0FDakIsQUFFRCxLQUNJLGFBQWMsQ0FDakIsQUFFRCxNQUNJLGVBQWdCLENBQ25CLEFBRUQsYUFDSSxXQUFZLENBQ2YsQUFFRCxvREFFSSxXQUFXLEFBQ1gsWUFBYSxDQUNoQixBQUVELE1BQ0kseUJBQXlCLEFBQ3pCLGdCQUFpQixDQUNwQixBQ3JERCxXQUNJLCtCQUFpQyxBQUNqQyx3Q0FBMEMsQUFDMUMsbVRBQWlVLEFBQ2pVLGdCQUFtQixBQUNuQixpQkFBa0IsQ0FBQSxBQUd0QixXQUNJLCtCQUFpQyxBQUNqQyxzQ0FBd0MsQUFDeEMsdVNBQXFULEFBQ3JULGdCQUFtQixBQUNuQixpQkFBa0IsQ0FBQSxBQUd0QixXQUNJLCtCQUFpQyxBQUNqQywwQ0FBNEMsQUFDNUMsK1RBQTZVLEFBQzdVLGdCQUFtQixBQUNuQixpQkFBa0IsQ0FBQSxBQUd0QixXQUNJLCtCQUFpQyxBQUNqQywyQ0FBNkMsQUFDN0MscVVBQW1WLEFBQ25WLGdCQUFtQixBQUNuQixpQkFBa0IsQ0FBQSxBQUd0QixXQUNJLCtCQUFpQyxBQUNqQyx3Q0FBMEMsQUFDMUMsbVRBQWlVLEFBQ2pVLGdCQUFpQixBQUNqQixpQkFBa0IsQ0FBQSxBQ3BDdEIsS0FDSSxXQUFXLEFBQ1gsaUJBQWlCLEFBQ2pCLGNBQWMsQUFDZCxrQkFBa0IsQUFDbEIsWUFBYSxDQUNoQixBQUlELFVBQ0ksZUFBZ0IsQ0FDbkIsQUFFRCxXQUNJLGNBQWUsQ0FDbEIsQUFFRCxNQUNJLGlCQUFpQixBQUNqQix1QkFBeUIsQ0FDNUIsQUFFRCxNQUNJLGVBQWUsQUFDZixvQkFBc0IsQ0FDekIsQUFFRCxNQUNJLGVBQWUsQUFDZixzQkFBd0IsQ0FDM0IsQUFFRCxPQUNJLHFCQUFxQixBQUNyQixxQkFBdUIsQ0FDMUIsQUFFRCxNQUNJLG9CQUFvQixBQUNwQix1QkFBeUIsQ0FDNUIsQUFFRCxPQUNJLGVBQWUsQUFDZixxQkFBdUIsQ0FDMUIsQUFFRCxPQUNJLGdDQUFnQyxBQUNoQyx1QkFBd0IsQ0FDM0IsQUFFRCxTQUNJLHFCQUFxQixBQUNyQix3QkFBeUIsQ0FDNUIsQUFFRCxNQUNJLGVBQWUsQUFDZixxQkFBc0IsQ0FDekIsQUFJRCxZQUNJLHNCQUF5QixDQUM1QixBQy9DRCx5QkFDSSxRQUNJLFdBQVcsQUFDWCxxQkFBc0IsQ0FDekIsQUFFRCxjQUNJLFlBQVksQUFDWixxQkFBc0IsQ0FDekIsQUFFRCxVQUNJLGNBQW9CLENBQ3ZCLEFBRUQsVUFDSSxlQUFvQixDQUN2QixBQUVELFVBQ0ksU0FBb0IsQ0FDdkIsQUFFRCxVQUNJLGVBQW9CLENBQ3ZCLEFBRUQsVUFDSSxlQUFvQixDQUN2QixBQUVELFVBQ0ksU0FBb0IsQ0FDdkIsQUFFRCxVQUNJLGVBQW9CLENBQ3ZCLEFBRUQsVUFDSSxlQUFvQixDQUN2QixBQUVELFVBQ0ksU0FBb0IsQ0FDdkIsQUFFRCxXQUNJLGVBQXFCLENBQ3hCLEFBRUQsV0FDSSxlQUFxQixDQUN4QixBQUVELFdBQ0ksVUFBVyxDQUNkLENBQUEsQUM5RUwsVUFFSSxXQUFZLENBQ2YsQUFFRCxLQUNJLGNBQWMsQUFDZCwrQkFBaUMsQUFDakMsZ0JBQWdCLEFBQ2hCLGtDQUFtQyxDQUN0QyxBQ1ZELGFBQ0ksV0FBVyxBQUNYLFlBQVksQUFDWixrQkFBa0IsQUFDbEIsU0FBUyxBQUNULFVBQVUsQUFDVixjQUFlLENBZWxCLEFBckJELHFCQ2N5RCxtRERKTyxBQ1NDLDBDRFRELENBQ3ZELEFBWFQscUJBY1ksU0FBVSxDQUNiLEFBZlQsdUJDY3lELHNERElVLEFDQ0YsNkNEREUsQ0FDMUQsQUFJVCxpQkFHSSxXQUFXLEFBQ1gsV0FBVyxBQUNYLG1CQUFtQixBQUNuQixnQkFBZ0IsQUFDaEIsbUNBQUEsQUFBMkIsMkJBQUEsQUNYa0MsdUJEYTVCLENBQ3BDLEFBRUQsT0FFSSxVQUFVLEFBQ1Ysc0JBQXNCLEFBQ3RCLGdCQUFnQixBQUNoQixnQkFBZ0IsQUFDaEIsaUJBQWtCLENBb0JyQixBQTFCRCxjQVNRLFlBQWEsQ0FDaEIsQUFWTCxTQ2hCaUUsd0JENkJ4QixBQUVqQyxxQkFBcUIsQUFDckIsV0FBWSxBQUNaLGNBQWMsQUFDZCxnQkFBZ0IsQUFDaEIsV0FBVyxBQUNYLGFBQWMsQ0FLakIsQUF6QkwsZUF1QlksK0JBQW9DLENBQ3ZDLEFBSVQsaUJBRVEsV0FBVyxBQUNYLFdBQVcsQUFDWCxZQUFZLEFBQ1osY0FBYyxBQUNkLGdDQUFvQyxBQUNwQyxpQkFBa0IsQ0FDckIsQUV2RUwsTUFHSSxnQkFBZ0IsQUFDaEIsaUJBQWtCLENBQ3JCLEFBRUQsc0JBTkksV0FBVyxBQUNYLFdBQVksQ0FLaEIsQUFNQyxnQkFIRyxrQkFBa0IsQUFDbEIsb0JBQUEsQUFBaUIsaUJBQUEsQUFDakIsVUFBWSxDQUNmLEFBRUQsZUFDSSxnQkFBZ0IsQUFDaEIsa0JBQWtCLEFBQ2xCLGlCQUFpQixBQUNqQixhQUFhLEFBQ2IsbUJBQW1CLEFBQ25CLG9CQUFxQixDQUN4QixBQUVELFNBQ0ksV0FBWSxBQUNaLGdCQUFpQixBQUNqQixlQUFlLEFBQ2Ysa0JBQW1CLENBa0J0QixBSnNJTyxtREk1SlIsU0FPUSxlQUFlLEFBQ2Ysa0JBQW1CLENBYzFCLENBQUEsQUpzSU8sZ0RJNUpSLFNBYVEsaUJBQWlCLEFBQ2pCLGdCQUFpQixDQVF4QixDQUFBLEFKc0lPLHdCSTVKUixTQW1CUSxlQUFlLEFBQ2YsZ0JBQWlCLENBRXhCLENBQUEsQUFVRCxnQkFDSSxhQUFjLENBQ2pCIiwiZmlsZSI6Im1haW4uY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIG5vcm1hbGl6ZS5jc3MgdjguMC4wIHwgTUlUIExpY2Vuc2UgfCBnaXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcyAqL1xuXG4vKiBEb2N1bWVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cbiAqL1xuXG5odG1sIHtcbiAgICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICAgIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogMiAqL1xufVxuXG4vKiBTZWN0aW9uc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuYm9keSB7XG4gICAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cblxuaDEge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIG1hcmdpbjogMC42N2VtIDA7XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICovXG5cbmhyIHtcbiAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMSAqL1xuICAgIGhlaWdodDogMDsgLyogMSAqL1xuICAgIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuXG5wcmUge1xuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5hIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLyoqXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cbiAqL1xuXG5hYmJyW3RpdGxlXSB7XG4gICAgYm9yZGVyLWJvdHRvbTogbm9uZTsgLyogMSAqL1xuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmUgZG90dGVkOyAvKiAyICovXG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAqL1xuXG5iLFxuc3Ryb25nIHtcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuY29kZSxcbmtiZCxcbnNhbXAge1xuICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc21hbGwge1xuICAgIGZvbnQtc2l6ZTogODAlO1xufVxuXG4vKipcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICogYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gICAgZm9udC1zaXplOiA3NSU7XG4gICAgbGluZS1oZWlnaHQ6IDA7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgICBib3R0b206IC0wLjI1ZW07XG59XG5cbnN1cCB7XG4gICAgdG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuXG5pbWcge1xuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gKi9cblxuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgICBmb250LWZhbWlseTogaW5oZXJpdDsgLyogMSAqL1xuICAgIGZvbnQtc2l6ZTogMTAwJTsgLyogMSAqL1xuICAgIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXG4gICAgbWFyZ2luOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gKiAxLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxuICovXG5cbmJ1dHRvbixcbmlucHV0IHsgLyogMSAqL1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxuICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbixcbnNlbGVjdCB7IC8qIDEgKi9cbiAgICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5cbmJ1dHRvbixcblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIGJvcmRlciBhbmQgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwiYnV0dG9uXCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJyZXNldFwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwic3VibWl0XCJdOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbn1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBwYWRkaW5nIGluIEZpcmVmb3guXG4gKi9cblxuZmllbGRzZXQge1xuICAgIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICogMy4gUmVtb3ZlIHRoZSBwYWRkaW5nIHNvIGRldmVsb3BlcnMgYXJlIG5vdCBjYXVnaHQgb3V0IHdoZW4gdGhleSB6ZXJvIG91dFxuICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxubGVnZW5kIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXG4gICAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cbiAgICBkaXNwbGF5OiB0YWJsZTsgLyogMSAqL1xuICAgIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xuICAgIHBhZGRpbmc6IDA7IC8qIDMgKi9cbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsOyAvKiAxICovXG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5wcm9ncmVzcyB7XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxuICovXG5cbnRleHRhcmVhIHtcbiAgICBvdmVyZmxvdzogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC5cbiAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC5cbiAqL1xuXG5bdHlwZT1cImNoZWNrYm94XCJdLFxuW3R5cGU9XCJyYWRpb1wiXSB7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgIHBhZGRpbmc6IDA7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gKi9cblxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gICAgaGVpZ2h0OiBhdXRvO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gICAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICogMi4gQ2hhbmdlIGZvbnQgcHJvcGVydGllcyB0byBgaW5oZXJpdGAgaW4gU2FmYXJpLlxuICovXG5cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXG4gICAgZm9udDogaW5oZXJpdDsgLyogMiAqL1xufVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFIDEwKywgYW5kIEZpcmVmb3guXG4gKi9cblxuZGV0YWlscyB7XG4gICAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxuc3VtbWFyeSB7XG4gICAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKiBNaXNjXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwKy5cbiAqL1xuXG50ZW1wbGF0ZSB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMC5cbiAqL1xuXG5baGlkZGVuXSB7XG4gICAgZGlzcGxheTogbm9uZTtcbn1cbiIsIi8qID09PT0gVmVuZG9yIEltcG9ydHMgID09PT0gKi9cbkBpbXBvcnQgXCJ2ZW5kb3Ivbm9ybWFsaXplXCI7XG5AaW1wb3J0IFwidmVuZG9yL3Jlc2V0XCI7XG5AaW1wb3J0IFwibm9kZV9tb2R1bGVzL3Nhc3MtcmVtL3JlbVwiO1xuQGltcG9ydCBcIm5vZGVfbW9kdWxlcy9iYXNzY3NzL2Nzcy9iYXNzY3NzLmNzc1wiO1xuQGltcG9ydCBcIm5vZGVfbW9kdWxlcy9jb21wYXNzLW1peGlucy9saWIvY29tcGFzcy9jc3MzXCI7XG5cbi8qID09PT0gQmFzZSBJbXBvcnRzICA9PT09ICovXG5AaW1wb3J0IFwiYmFzZS9mb250c1wiO1xuQGltcG9ydCBcImJhc2UvaGVscGVyc1wiO1xuQGltcG9ydCBcImJhc2UvYnJlYWtwb2ludHNcIjtcbkBpbXBvcnQgXCJiYXNlL2Jhc2VcIjtcblxuLyogPT09PSBDb21wb25lbnQgSW1wb3J0cyAgPT09PSAqL1xuQGltcG9ydCBcImNvbXBvbmVudHMvaGVhZGVyXCI7XG5AaW1wb3J0IFwiY29tcG9uZW50cy9oZXJvXCI7XG4iLCJAY2hhcnNldCBcIlVURi04XCI7XG4vKiA9PT09IFZlbmRvciBJbXBvcnRzICA9PT09ICovXG4vKiEgbm9ybWFsaXplLmNzcyB2OC4wLjAgfCBNSVQgTGljZW5zZSB8IGdpdGh1Yi5jb20vbmVjb2xhcy9ub3JtYWxpemUuY3NzICovXG4vKiBEb2N1bWVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpbiBpT1MuXG4gKi9cbkBpbXBvcnQgdXJsKG5vZGVfbW9kdWxlcy9iYXNzY3NzL2Nzcy9iYXNzY3NzLmNzcyk7XG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovIH1cblxuLyogU2VjdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2Vycy5cbiAqL1xuYm9keSB7XG4gIG1hcmdpbjogMDsgfVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcbiAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gKi9cbmgxIHtcbiAgZm9udC1zaXplOiAyZW07XG4gIG1hcmdpbjogMC42N2VtIDA7IH1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICovXG5ociB7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovIH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICogMS4gUmVtb3ZlIHRoZSBib3R0b20gYm9yZGVyIGluIENocm9tZSA1Ny1cbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXG4gKi9cbmFiYnJbdGl0bGVdIHtcbiAgYm9yZGVyLWJvdHRvbTogbm9uZTtcbiAgLyogMSAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAqL1xuY29kZSxcbmtiZCxcbnNhbXAge1xuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxZW07XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXG4gKiBhbGwgYnJvd3NlcnMuXG4gKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IH1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIFJlbW92ZSB0aGUgYm9yZGVyIG9uIGltYWdlcyBpbnNpZGUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTsgfVxuXG4vKiBGb3Jtc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMSAqL1xuICBtYXJnaW46IDA7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFNob3cgdGhlIG92ZXJmbG93IGluIElFLlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQge1xuICAvKiAxICovXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gKi9cbmJ1dHRvbixcbnNlbGVjdCB7XG4gIC8qIDEgKi9cbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICovXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyB9XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAqL1xuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInJlc2V0XCJdOjotbW96LWZvY3VzLWlubmVyLFxuW3R5cGU9XCJzdWJtaXRcIl06Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7IH1cblxuLyoqXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gKi9cbmJ1dHRvbjotbW96LWZvY3VzcmluZyxcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJyZXNldFwiXTotbW96LWZvY3VzcmluZyxcblt0eXBlPVwic3VibWl0XCJdOi1tb3otZm9jdXNyaW5nIHtcbiAgb3V0bGluZTogMXB4IGRvdHRlZCBCdXR0b25UZXh0OyB9XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgcGFkZGluZyBpbiBGaXJlZm94LlxuICovXG5maWVsZHNldCB7XG4gIHBhZGRpbmc6IDAuMzVlbSAwLjc1ZW0gMC42MjVlbTsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gKiAyLiBDb3JyZWN0IHRoZSBjb2xvciBpbmhlcml0YW5jZSBmcm9tIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gSUUuXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAqL1xubGVnZW5kIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBjb2xvcjogaW5oZXJpdDtcbiAgLyogMiAqL1xuICBkaXNwbGF5OiB0YWJsZTtcbiAgLyogMSAqL1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMyAqL1xuICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAvKiAxICovIH1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICovXG5wcm9ncmVzcyB7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxuICovXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAuXG4gKiAyLiBSZW1vdmUgdGhlIHBhZGRpbmcgaW4gSUUgMTAuXG4gKi9cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBDb3JyZWN0IHRoZSBjdXJzb3Igc3R5bGUgb2YgaW5jcmVtZW50IGFuZCBkZWNyZW1lbnQgYnV0dG9ucyBpbiBDaHJvbWUuXG4gKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87IH1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICovXG5bdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAyICovIH1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGlubmVyIHBhZGRpbmcgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi8gfVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxuICovXG5kZXRhaWxzIHtcbiAgZGlzcGxheTogYmxvY2s7IH1cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTsgfVxuXG4vKiBNaXNjXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSAxMCsuXG4gKi9cbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTsgfVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLlxuICovXG5baGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmU7IH1cblxuLyogaHR0cDovL21leWVyd2ViLmNvbS9lcmljL3Rvb2xzL2Nzcy9yZXNldC9cbiAgIHYyLjAgfCAyMDExMDEyNlxuICAgTGljZW5zZTogbm9uZSAocHVibGljIGRvbWFpbilcbiovXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuYiwgdSwgaSwgY2VudGVyLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbiAgZm9udDogaW5oZXJpdDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbi8qIEhUTUw1IGRpc3BsYXktcm9sZSByZXNldCBmb3Igb2xkZXIgYnJvd3NlcnMgKi9cbmFydGljbGUsIGFzaWRlLCBkZXRhaWxzLCBmaWdjYXB0aW9uLCBmaWd1cmUsXG5mb290ZXIsIGhlYWRlciwgaGdyb3VwLCBtZW51LCBuYXYsIHNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG5ib2R5IHtcbiAgbGluZS1oZWlnaHQ6IDE7IH1cblxub2wsIHVsIHtcbiAgbGlzdC1zdHlsZTogbm9uZTsgfVxuXG5ibG9ja3F1b3RlLCBxIHtcbiAgcXVvdGVzOiBub25lOyB9XG5cbmJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyLFxucTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbi8qID09PT0gQmFzZSBJbXBvcnRzICA9PT09ICovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaS5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLURlbWkud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaS50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLnN2ZyNBdmVuaXJOZXh0TFRQcm8tRGVtaVwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC5lb3RcIik7XG4gIHNyYzogdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUl0LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUl0LndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUl0LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUl0LnN2ZyNBdmVuaXJOZXh0TFRQcm8tSXRcIikgZm9ybWF0KFwic3ZnXCIpO1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBmb250LXN0eWxlOiBpdGFsaWM7IH1cblxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyIE5leHQgTFQgUHJvJztcbiAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaUl0LmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaUl0LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pSXQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pSXQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaUl0LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLURlbWlJdC5zdmcjQXZlbmlyTmV4dExUUHJvLURlbWlJdFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tUmVndWxhci5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tUmVndWxhci53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLVJlZ3VsYXIud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tUmVndWxhci50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLnN2ZyNBdmVuaXJOZXh0TFRQcm8tUmVndWxhclwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDsgfVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1Cb2xkLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tQm9sZC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tQm9sZC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUJvbGQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tQm9sZC50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1Cb2xkLnN2ZyNBdmVuaXJOZXh0TFRQcm8tQm9sZFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXN0eWxlOiBub3JtYWw7IH1cblxuLyogPT09PSBsYXlvdXQgID09PT0gKi9cbi5yb3cge1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiAxMDI0cHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHBhZGRpbmc6IDAgMiU7IH1cblxuLyogPT09PSBUeXBlIFNpemUgID09PT0gKi9cbi5naWdhbnRpYyB7XG4gIGZvbnQtc2l6ZTogMTFyZW07IH1cblxuLnN1cGVyc2l6ZSB7XG4gIGZvbnQtc2l6ZTogOHJlbTsgfVxuXG4udGVyYSB7XG4gIGZvbnQtc2l6ZTogNi41cmVtO1xuICAvKiAxMTcgLyAxOCA9IDYuNSAqL1xuICBtYXJnaW4tYm90dG9tOiAwLjI1Mzg1cmVtOyB9XG5cbi5naWdhIHtcbiAgZm9udC1zaXplOiA1cmVtO1xuICAvKiA5MCAvIDE4ID0gNSAqL1xuICBtYXJnaW4tYm90dG9tOiAwLjMzcmVtOyB9XG5cbi5tZWdhIHtcbiAgZm9udC1zaXplOiA0cmVtO1xuICAvKiA3MiAvIDE4ID0gNCAqL1xuICBtYXJnaW4tYm90dG9tOiAwLjQxMjVyZW07IH1cblxuLmFscGhhIHtcbiAgZm9udC1zaXplOiAzLjMzMzMzcmVtO1xuICAvKiA2MCAvIDE4ID0gMy4zMzMzICovXG4gIG1hcmdpbi1ib3R0b206IDAuNDk1cmVtOyB9XG5cbi5iZXRhIHtcbiAgZm9udC1zaXplOiAyLjY2NjdyZW07XG4gIC8qIDQ4IC8gMTggPSAyLjY2NjcgKi9cbiAgbWFyZ2luLWJvdHRvbTogMC42MTg3NXJlbTsgfVxuXG4uZ2FtbWEge1xuICBmb250LXNpemU6IDJyZW07XG4gIC8qIDM2IC8gMTggPSAyICovXG4gIG1hcmdpbi1ib3R0b206IDAuODI1cmVtOyB9XG5cbi5kZWx0YSB7XG4gIGZvbnQtc2l6ZTogMS4zMzMzMzMzMzMzMzMzMzMzcmVtO1xuICAvKiAyNCAvIDE4ID0gMS4zMzMzICovXG4gIG1hcmdpbi1ib3R0b206IDEuMjM3NXJlbTsgfVxuXG4uZXBzaWxvbiB7XG4gIGZvbnQtc2l6ZTogMS4xNjY2N3JlbTtcbiAgLyogMjEgLyAxOCA9IDEuMTY2NyAqL1xuICBtYXJnaW4tYm90dG9tOiAxLjQxNDI5cmVtOyB9XG5cbi56ZXRhIHtcbiAgZm9udC1zaXplOiAxcmVtO1xuICAvKiAxOCA9IDE4IMOXIDEgKi9cbiAgbWFyZ2luLWJvdHRvbTogMS42NXJlbTsgfVxuXG4vKiA9PT09IFR5cGVmYWNlcyAgPT09PSAqL1xuLm1vbnRzZXJyYXQge1xuICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7IH1cblxuQG1lZGlhIChtaW4td2lkdGg6IDMyMHB4KSB7XG4gIC54cy1jb2wge1xuICAgIGZsb2F0OiBsZWZ0O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cbiAgLnhzLWNvbC1yaWdodCB7XG4gICAgZmxvYXQ6IHJpZ2h0O1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IH1cbiAgLnhzLWNvbC0xIHtcbiAgICB3aWR0aDogOC4zMzMzMyU7IH1cbiAgLnhzLWNvbC0yIHtcbiAgICB3aWR0aDogMTYuNjY2NjclOyB9XG4gIC54cy1jb2wtMyB7XG4gICAgd2lkdGg6IDI1JTsgfVxuICAueHMtY29sLTQge1xuICAgIHdpZHRoOiAzMy4zMzMzMyU7IH1cbiAgLnhzLWNvbC01IHtcbiAgICB3aWR0aDogNDEuNjY2NjclOyB9XG4gIC54cy1jb2wtNiB7XG4gICAgd2lkdGg6IDUwJTsgfVxuICAueHMtY29sLTcge1xuICAgIHdpZHRoOiA1OC4zMzMzMyU7IH1cbiAgLnhzLWNvbC04IHtcbiAgICB3aWR0aDogNjYuNjY2NjclOyB9XG4gIC54cy1jb2wtOSB7XG4gICAgd2lkdGg6IDc1JTsgfVxuICAueHMtY29sLTEwIHtcbiAgICB3aWR0aDogODMuMzMzMzMlOyB9XG4gIC54cy1jb2wtMTEge1xuICAgIHdpZHRoOiA5MS42NjY2NyU7IH1cbiAgLnhzLWNvbC0xMiB7XG4gICAgd2lkdGg6IDEwMCU7IH0gfVxuXG5odG1sLFxuYm9keSB7XG4gIGhlaWdodDogMTAwJTsgfVxuXG5ib2R5IHtcbiAgY29sb3I6ICM4ZjhmOGY7XG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyIE5leHQgTFQgUHJvJztcbiAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7IH1cblxuLyogPT09PSBDb21wb25lbnQgSW1wb3J0cyAgPT09PSAqL1xuLm1lbnUtdG9nZ2xlIHtcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogMzBweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDIwcHg7XG4gIGxlZnQ6IDI1cHg7XG4gIGN1cnNvcjogcG9pbnRlcjsgfVxuICAubWVudS10b2dnbGUub24gLm9uZSB7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDdweCwgN3B4KTtcbiAgICAtbW96LXRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKSB0cmFuc2xhdGUoN3B4LCA3cHgpO1xuICAgIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDdweCwgN3B4KTtcbiAgICAtby10cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDdweCwgN3B4KTtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZykgdHJhbnNsYXRlKDdweCwgN3B4KTsgfVxuICAubWVudS10b2dnbGUub24gLnR3byB7XG4gICAgb3BhY2l0eTogMDsgfVxuICAubWVudS10b2dnbGUub24gLnRocmVlIHtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKDhweCwgLTEwcHgpO1xuICAgIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoOHB4LCAtMTBweCk7XG4gICAgLW1zLXRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKDhweCwgLTEwcHgpO1xuICAgIC1vLXRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKDhweCwgLTEwcHgpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKC00NWRlZykgdHJhbnNsYXRlKDhweCwgLTEwcHgpOyB9XG5cbi5vbmUsXG4udHdvLFxuLnRocmVlIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogNXB4O1xuICBiYWNrZ3JvdW5kOiAjMzA0M2EwO1xuICBtYXJnaW46IDZweCBhdXRvO1xuICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC4zcztcbiAgLW1vei10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xuICAtby10cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzO1xuICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjNzOyB9XG5cbm5hdiB1bCB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgZm9udC1mYW1pbHk6IE9wZW4gU2FucztcbiAgbGlzdC1zdHlsZTogbm9uZTtcbiAgbWFyZ2luOiA0ZW0gYXV0bztcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG4gIG5hdiB1bC5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7IH1cbiAgbmF2IHVsIGEge1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjogMC41cztcbiAgICAtbW96LXRyYW5zaXRpb24tZHVyYXRpb246IDAuNXM7XG4gICAgLW8tdHJhbnNpdGlvbi1kdXJhdGlvbjogMC41cztcbiAgICB0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjVzO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjb2xvcjogd2hpdGU7XG4gICAgZm9udC1zaXplOiAzZW07XG4gICAgbGluZS1oZWlnaHQ6IDIuNTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiBibG9jazsgfVxuICAgIG5hdiB1bCBhOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC41KTsgfVxuXG4ubWVudS1zZWN0aW9uLm9uIHtcbiAgei1pbmRleDogMTA7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTsgfVxuXG4uaGVybyB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgfVxuXG4uaGVybyAuYWxwaGEtYmcge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG9iamVjdC1maXQ6IGNvdmVyO1xuICBvcGFjaXR5OiAwLjU7IH1cblxuLmhlcm8gLndyYXBwZXIge1xuICBtYXgtd2lkdGg6IDI1cmVtO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGxlZnQ7IH1cblxuLmhlcm8gaDEge1xuICBjb2xvcjogYmxhY2s7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDRyZW07XG4gIG1hcmdpbi1sZWZ0OiAxLjJyZW07IH1cbiAgQG1lZGlhIChtaW4td2lkdGg6IDMzLjc1ZW0pIGFuZCAobWF4LXdpZHRoOiA0NC45OWVtKSB7XG4gICAgLmhlcm8gaDEge1xuICAgICAgZm9udC1zaXplOiA1cmVtO1xuICAgICAgbWFyZ2luLWxlZnQ6IDEuNXJlbTsgfSB9XG4gIEBtZWRpYSAobWluLXdpZHRoOiA0NWVtKSBhbmQgKG1heC13aWR0aDogNTkuOTllbSkge1xuICAgIC5oZXJvIGgxIHtcbiAgICAgIGZvbnQtc2l6ZTogNi41cmVtO1xuICAgICAgbWFyZ2luLWxlZnQ6IDJyZW07IH0gfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNjBlbSkge1xuICAgIC5oZXJvIGgxIHtcbiAgICAgIGZvbnQtc2l6ZTogOHJlbTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAycmVtOyB9IH1cblxuLmNvbG9yLWVtcGhhc2lzIHtcbiAgY29sb3I6ICMzMDQzYTA7IH1cbiIsIi8qIGh0dHA6Ly9tZXllcndlYi5jb20vZXJpYy90b29scy9jc3MvcmVzZXQvXG4gICB2Mi4wIHwgMjAxMTAxMjZcbiAgIExpY2Vuc2U6IG5vbmUgKHB1YmxpYyBkb21haW4pXG4qL1xuXG5odG1sLCBib2R5LCBkaXYsIHNwYW4sIGFwcGxldCwgb2JqZWN0LCBpZnJhbWUsXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG5hLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG5kZWwsIGRmbiwgZW0sIGltZywgaW5zLCBrYmQsIHEsIHMsIHNhbXAsXG5zbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuYiwgdSwgaSwgY2VudGVyLFxuZGwsIGR0LCBkZCwgb2wsIHVsLCBsaSxcbmZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxudGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG5hcnRpY2xlLCBhc2lkZSwgY2FudmFzLCBkZXRhaWxzLCBlbWJlZCxcbmZpZ3VyZSwgZmlnY2FwdGlvbiwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCxcbm1lbnUsIG5hdiwgb3V0cHV0LCBydWJ5LCBzZWN0aW9uLCBzdW1tYXJ5LFxudGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IDA7XG4gICAgZm9udC1zaXplOiAxMDAlO1xuICAgIGZvbnQ6IGluaGVyaXQ7XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xufVxuXG4vKiBIVE1MNSBkaXNwbGF5LXJvbGUgcmVzZXQgZm9yIG9sZGVyIGJyb3dzZXJzICovXG5hcnRpY2xlLCBhc2lkZSwgZGV0YWlscywgZmlnY2FwdGlvbiwgZmlndXJlLFxuZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbn1cblxuYm9keSB7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbm9sLCB1bCB7XG4gICAgbGlzdC1zdHlsZTogbm9uZTtcbn1cblxuYmxvY2txdW90ZSwgcSB7XG4gICAgcXVvdGVzOiBub25lO1xufVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlcixcbnE6YmVmb3JlLCBxOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBjb250ZW50OiBub25lO1xufVxuXG50YWJsZSB7XG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICBib3JkZXItc3BhY2luZzogMDtcbn1cbiIsIkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnQXZlbmlyIE5leHQgTFQgUHJvJztcbiAgICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLmVvdFwiKTtcbiAgICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaS53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLURlbWkuc3ZnI0F2ZW5pck5leHRMVFByby1EZW1pXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICAgIHNyYzogdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUl0LmVvdFwiKTtcbiAgICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tSXQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1JdC5zdmcjQXZlbmlyTmV4dExUUHJvLUl0XCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICAgIHNyYzogdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLURlbWlJdC5lb3RcIik7XG4gICAgc3JjOiB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaUl0LmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pSXQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1EZW1pSXQud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tRGVtaUl0LnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLURlbWlJdC5zdmcjQXZlbmlyTmV4dExUUHJvLURlbWlJdFwiKSBmb3JtYXQoXCJzdmdcIik7XG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5cbkBmb250LWZhY2Uge1xuICAgIGZvbnQtZmFtaWx5OiAnQXZlbmlyIE5leHQgTFQgUHJvJztcbiAgICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLmVvdFwiKTtcbiAgICBzcmM6IHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLndvZmYyXCIpIGZvcm1hdChcIndvZmYyXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tUmVndWxhci53b2ZmXCIpIGZvcm1hdChcIndvZmZcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1SZWd1bGFyLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLVJlZ3VsYXIuc3ZnI0F2ZW5pck5leHRMVFByby1SZWd1bGFyXCIpIGZvcm1hdChcInN2Z1wiKTtcbiAgICBmb250LXdlaWdodDogbm9ybWFsO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cblxuQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICdBdmVuaXIgTmV4dCBMVCBQcm8nO1xuICAgIHNyYzogdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUJvbGQuZW90XCIpO1xuICAgIHNyYzogdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUJvbGQuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUJvbGQud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImZvbnRzL0F2ZW5pck5leHRMVFByby1Cb2xkLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiZm9udHMvQXZlbmlyTmV4dExUUHJvLUJvbGQudHRmXCIpIGZvcm1hdChcInRydWV0eXBlXCIpLCB1cmwoXCJmb250cy9BdmVuaXJOZXh0TFRQcm8tQm9sZC5zdmcjQXZlbmlyTmV4dExUUHJvLUJvbGRcIikgZm9ybWF0KFwic3ZnXCIpO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbn1cbiIsIi8qID09PT0gbGF5b3V0ICA9PT09ICovXG4ucm93IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXgtd2lkdGg6IDEwMjRweDtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgcGFkZGluZzogMCAyJTtcbn1cblxuLyogPT09PSBUeXBlIFNpemUgID09PT0gKi9cblxuLmdpZ2FudGljIHtcbiAgICBmb250LXNpemU6IDExcmVtO1xufVxuXG4uc3VwZXJzaXplIHtcbiAgICBmb250LXNpemU6IDhyZW07XG59XG5cbi50ZXJhIHtcbiAgICBmb250LXNpemU6IDYuNXJlbTsgLyogMTE3IC8gMTggPSA2LjUgKi9cbiAgICBtYXJnaW4tYm90dG9tOiAwLjI1Mzg1cmVtO1xufVxuXG4uZ2lnYSB7XG4gICAgZm9udC1zaXplOiA1cmVtOyAvKiA5MCAvIDE4ID0gNSAqL1xuICAgIG1hcmdpbi1ib3R0b206IDAuMzNyZW07XG59XG5cbi5tZWdhIHtcbiAgICBmb250LXNpemU6IDRyZW07IC8qIDcyIC8gMTggPSA0ICovXG4gICAgbWFyZ2luLWJvdHRvbTogMC40MTI1cmVtO1xufVxuXG4uYWxwaGEge1xuICAgIGZvbnQtc2l6ZTogMy4zMzMzM3JlbTsgLyogNjAgLyAxOCA9IDMuMzMzMyAqL1xuICAgIG1hcmdpbi1ib3R0b206IDAuNDk1cmVtO1xufVxuXG4uYmV0YSB7XG4gICAgZm9udC1zaXplOiAyLjY2NjdyZW07IC8qIDQ4IC8gMTggPSAyLjY2NjcgKi9cbiAgICBtYXJnaW4tYm90dG9tOiAwLjYxODc1cmVtO1xufVxuXG4uZ2FtbWEge1xuICAgIGZvbnQtc2l6ZTogMnJlbTsgLyogMzYgLyAxOCA9IDIgKi9cbiAgICBtYXJnaW4tYm90dG9tOiAwLjgyNXJlbTtcbn1cblxuLmRlbHRhIHtcbiAgICBmb250LXNpemU6IDEuMzMzMzMzMzMzMzMzMzMzM3JlbTsgLyogMjQgLyAxOCA9IDEuMzMzMyAqL1xuICAgIG1hcmdpbi1ib3R0b206IDEuMjM3NXJlbTtcbn1cblxuLmVwc2lsb24ge1xuICAgIGZvbnQtc2l6ZTogMS4xNjY2N3JlbTsgLyogMjEgLyAxOCA9IDEuMTY2NyAqL1xuICAgIG1hcmdpbi1ib3R0b206IDEuNDE0MjlyZW07XG59XG5cbi56ZXRhIHtcbiAgICBmb250LXNpemU6IDFyZW07IC8qIDE4ID0gMTggw5cgMSAqL1xuICAgIG1hcmdpbi1ib3R0b206IDEuNjVyZW07XG59XG5cbi8qID09PT0gVHlwZWZhY2VzICA9PT09ICovXG5cbi5tb250c2VycmF0IHtcbiAgICBmb250LWZhbWlseTogXCJNb250c2VycmF0XCI7XG59XG4iLCJAY2hhcnNldCBcIlVURi04XCI7IC8vIEZpeGVzIGFuIGlzc3VlIHdoZXJlIFJ1YnkgbG9jYWxlIGlzIG5vdCBzZXQgcHJvcGVybHlcbi8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vc2Fzcy1tcS9zYXNzLW1xL3B1bGwvMTBcblxuJG1vYmlsZTogMzIwcHg7XG4kdGFibGV0OiA1NDBweDtcbiR0YWJsZXRMYXJnZTogNzIwcHg7XG4kZGVza3RvcDogOTYwcHg7XG4kZGVza3RvcExhcmdlOiAxMDI0cHg7XG5cbiRicmVha3BvaW50LXhzOiBcIihtaW4td2lkdGg6ICN7JG1vYmlsZX0pXCI7XG4kYnJlYWtwb2ludC1zbTogXCIobWluLXdpZHRoOiAjeyR0YWJsZXR9KVwiO1xuJGJyZWFrcG9pbnQtbWQ6IFwiKG1pbi13aWR0aDogI3skdGFibGV0TGFyZ2V9KVwiO1xuJGJyZWFrcG9pbnQtbGc6IFwiKG1pbi13aWR0aDogI3skZGVza3RvcH0pXCI7XG4kYnJlYWtwb2ludC14bDogXCIobWluLXdpZHRoOiAjeyRkZXNrdG9wTGFyZ2V9KVwiO1xuXG4kYnJlYWtwb2ludC1tYXgteHM6IFwiKG1heC13aWR0aDogI3skbW9iaWxlfSlcIjtcbiRicmVha3BvaW50LW1heC1zbTogXCIobWF4LXdpZHRoOiAjeyR0YWJsZXR9KVwiO1xuJGJyZWFrcG9pbnQtbWF4LW1kOiBcIihtYXgtd2lkdGg6ICN7JHRhYmxldExhcmdlfSlcIjtcbiRicmVha3BvaW50LW1heC1sZzogXCIobWF4LXdpZHRoOiAjeyRkZXNrdG9wfSlcIjtcbiRicmVha3BvaW50LW1heC14bDogXCIobWF4LXdpZHRoOiAjeyRkZXNrdG9wTGFyZ2V9KVwiO1xuXG5AbWVkaWEgI3skYnJlYWtwb2ludC14c30ge1xuICAgIC54cy1jb2wge1xuICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICB9XG5cbiAgICAueHMtY29sLXJpZ2h0IHtcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIH1cblxuICAgIC54cy1jb2wtMSB7XG4gICAgICAgIHdpZHRoOiAxIC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtMiB7XG4gICAgICAgIHdpZHRoOiAyIC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtMyB7XG4gICAgICAgIHdpZHRoOiAzIC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtNCB7XG4gICAgICAgIHdpZHRoOiA0IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtNSB7XG4gICAgICAgIHdpZHRoOiA1IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtNiB7XG4gICAgICAgIHdpZHRoOiA2IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtNyB7XG4gICAgICAgIHdpZHRoOiA3IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtOCB7XG4gICAgICAgIHdpZHRoOiA4IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtOSB7XG4gICAgICAgIHdpZHRoOiA5IC8gMTIgKiAxMDAlO1xuICAgIH1cblxuICAgIC54cy1jb2wtMTAge1xuICAgICAgICB3aWR0aDogMTAgLyAxMiAqIDEwMCU7XG4gICAgfVxuXG4gICAgLnhzLWNvbC0xMSB7XG4gICAgICAgIHdpZHRoOiAxMSAvIDEyICogMTAwJTtcbiAgICB9XG5cbiAgICAueHMtY29sLTEyIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxufVxuXG4vLy8gQmFzZSBmb250IHNpemUgb24gdGhlIGA8Ym9keT5gIGVsZW1lbnRcbi8vLyBAdHlwZSBOdW1iZXIgKHVuaXQpXG4kbXEtYmFzZS1mb250LXNpemU6IDE2cHggIWRlZmF1bHQ7XG5cbi8vLyBSZXNwb25zaXZlIG1vZGVcbiRtcS1yZXNwb25zaXZlOiB0cnVlICFkZWZhdWx0O1xuXG4vLy8gQnJlYWtwb2ludCBsaXN0XG4kbXEtYnJlYWtwb2ludHM6IChtb2JpbGU6ICRtb2JpbGUsIHRhYmxldDogJHRhYmxldCwgdGFibGV0TGFyZ2U6ICR0YWJsZXRMYXJnZSwgZGVza3RvcDogJGRlc2t0b3AsIGRlc2t0b3BMYXJnZTogJGRlc2t0b3BMYXJnZSkgIWRlZmF1bHQ7XG5cbi8vLyBTdGF0aWMgYnJlYWtwb2ludCAoZm9yIGZpeGVkLXdpZHRoIGxheW91dHMpXG4kbXEtc3RhdGljLWJyZWFrcG9pbnQ6IGRlc2t0b3AgIWRlZmF1bHQ7XG5cbi8vLyBTaG93IGJyZWFrcG9pbnRzIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyXG4kbXEtc2hvdy1icmVha3BvaW50czogKCkgIWRlZmF1bHQ7XG5cbi8vLyBDdXN0b21pemUgdGhlIG1lZGlhIHR5cGUgKGUuZy4gYEBtZWRpYSBzY3JlZW5gIG9yIGBAbWVkaWEgcHJpbnRgKVxuJG1xLW1lZGlhLXR5cGU6IGFsbCAhZGVmYXVsdDtcblxuLy8vIENvbnZlcnQgcGl4ZWxzIHRvIGVtc1xuQGZ1bmN0aW9uIG1xLXB4MmVtKCRweCwgJGJhc2UtZm9udC1zaXplOiAkbXEtYmFzZS1mb250LXNpemUpIHtcbiAgICBAaWYgdW5pdGxlc3MoJHB4KSB7XG4gICAgICAgIEB3YXJuIFwiQXNzdW1pbmcgI3skcHh9IHRvIGJlIGluIHBpeGVscywgYXR0ZW1wdGluZyB0byBjb252ZXJ0IGl0IGludG8gcGl4ZWxzLlwiO1xuXG4gICAgICAgIEByZXR1cm4gbXEtcHgyZW0oJHB4ICogMXB4LCAkYmFzZS1mb250LXNpemUpO1xuICAgIH1cbiAgICBAZWxzZSBpZiB1bml0KCRweCkgPT0gZW0ge1xuICAgICAgICBAcmV0dXJuICRweDtcbiAgICB9XG5cbiAgICBAcmV0dXJuICRweCAvICRiYXNlLWZvbnQtc2l6ZSAqIDFlbTtcbn1cblxuLy8vIEdldCBhIGJyZWFrcG9pbnQncyB3aWR0aFxuQGZ1bmN0aW9uIG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRuYW1lLCAkYnJlYWtwb2ludHM6ICRtcS1icmVha3BvaW50cykge1xuICAgIEBpZiBtYXAtaGFzLWtleSgkYnJlYWtwb2ludHMsICRuYW1lKSB7XG4gICAgICAgIEByZXR1cm4gbWFwLWdldCgkYnJlYWtwb2ludHMsICRuYW1lKTtcbiAgICB9XG4gICAgQGVsc2Uge1xuICAgICAgICBAd2FybiBcIkJyZWFrcG9pbnQgI3skbmFtZX0gd2Fzbid0IGZvdW5kIGluICRicmVha3BvaW50cy5cIjtcbiAgICB9XG59XG5cbi8vLyBNZWRpYSBRdWVyeSBtaXhpblxuQG1peGluIG1xKCRmcm9tOiBmYWxzZSwgJHVudGlsOiBmYWxzZSwgJGFuZDogZmFsc2UsICRtZWRpYS10eXBlOiAkbXEtbWVkaWEtdHlwZSwgJGJyZWFrcG9pbnRzOiAkbXEtYnJlYWtwb2ludHMsICRyZXNwb25zaXZlOiAkbXEtcmVzcG9uc2l2ZSwgJHN0YXRpYy1icmVha3BvaW50OiAkbXEtc3RhdGljLWJyZWFrcG9pbnQpIHtcbiAgICAkbWluLXdpZHRoOiAwO1xuICAgICRtYXgtd2lkdGg6IDA7XG4gICAgJG1lZGlhLXF1ZXJ5OiBcIlwiO1xuXG4gICAgLy8gRnJvbTogdGhpcyBicmVha3BvaW50IChpbmNsdXNpdmUpXG4gICAgQGlmICRmcm9tIHtcbiAgICAgICAgQGlmIHR5cGUtb2YoJGZyb20pID09IG51bWJlciB7XG4gICAgICAgICAgICAkbWluLXdpZHRoOiBtcS1weDJlbSgkZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgQGVsc2Uge1xuICAgICAgICAgICAgJG1pbi13aWR0aDogbXEtcHgyZW0obXEtZ2V0LWJyZWFrcG9pbnQtd2lkdGgoJGZyb20sICRicmVha3BvaW50cykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVW50aWw6IHRoYXQgYnJlYWtwb2ludCAoZXhjbHVzaXZlKVxuICAgIEBpZiAkdW50aWwge1xuICAgICAgICBAaWYgdHlwZS1vZigkdW50aWwpID09IG51bWJlciB7XG4gICAgICAgICAgICAkbWF4LXdpZHRoOiBtcS1weDJlbSgkdW50aWwpO1xuICAgICAgICB9XG4gICAgICAgIEBlbHNlIHtcbiAgICAgICAgICAgICRtYXgtd2lkdGg6IG1xLXB4MmVtKG1xLWdldC1icmVha3BvaW50LXdpZHRoKCR1bnRpbCwgJGJyZWFrcG9pbnRzKSkgLSAwLjAxZW07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXNwb25zaXZlIHN1cHBvcnQgaXMgZGlzYWJsZWQsIHJhc3Rlcml6ZSB0aGUgb3V0cHV0IG91dHNpZGUgQG1lZGlhIGJsb2Nrc1xuICAgIC8vIFRoZSBicm93c2VyIHdpbGwgcmVseSBvbiB0aGUgY2FzY2FkZSBpdHNlbGYuXG4gICAgQGlmICRyZXNwb25zaXZlID09IGZhbHNlIHtcbiAgICAgICAgJHN0YXRpYy1icmVha3BvaW50LXdpZHRoOiBtcS1nZXQtYnJlYWtwb2ludC13aWR0aCgkc3RhdGljLWJyZWFrcG9pbnQsICRicmVha3BvaW50cyk7XG4gICAgICAgICR0YXJnZXQtd2lkdGg6IG1xLXB4MmVtKCRzdGF0aWMtYnJlYWtwb2ludC13aWR0aCk7XG5cbiAgICAgICAgLy8gT3V0cHV0IG9ubHkgcnVsZXMgdGhhdCBzdGFydCBhdCBvciBzcGFuIG91ciB0YXJnZXQgd2lkdGhcbiAgICAgICAgQGlmICRhbmQgPT0gZmFsc2UgYW5kICRtaW4td2lkdGggPD0gJHRhcmdldC13aWR0aCBhbmQgKCR1bnRpbCA9PSBmYWxzZSBvciAkbWF4LXdpZHRoID49ICR0YXJnZXQtd2lkdGgpIHtcbiAgICAgICAgICAgIEBjb250ZW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIEBlbHNlIHtcbiAgICAgICAgQGlmICRtaW4td2lkdGggIT0gMCB7XG4gICAgICAgICAgICAkbWVkaWEtcXVlcnk6IFwiI3skbWVkaWEtcXVlcnl9IGFuZCAobWluLXdpZHRoOiAjeyRtaW4td2lkdGh9KVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgQGlmICRtYXgtd2lkdGggIT0gMCB7XG4gICAgICAgICAgICAkbWVkaWEtcXVlcnk6IFwiI3skbWVkaWEtcXVlcnl9IGFuZCAobWF4LXdpZHRoOiAjeyRtYXgtd2lkdGh9KVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgQGlmICRhbmQge1xuICAgICAgICAgICAgJG1lZGlhLXF1ZXJ5OiBcIiN7JG1lZGlhLXF1ZXJ5fSBhbmQgI3skYW5kfVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IG1lZGlhIHF1ZXJ5IHByZWZpeCAnYWxsIGFuZCAnXG4gICAgICAgIEBpZiAkbWVkaWEtdHlwZSA9PSBcImFsbFwiIGFuZCAkbWVkaWEtcXVlcnkgIT0gXCJcIiB7XG4gICAgICAgICAgICAkbWVkaWEtdHlwZTogXCJcIjtcbiAgICAgICAgICAgICRtZWRpYS1xdWVyeTogc3RyLXNsaWNlKHVucXVvdGUoJG1lZGlhLXF1ZXJ5KSwgNik7XG4gICAgICAgIH1cblxuICAgICAgICBAbWVkaWEgI3skbWVkaWEtdHlwZSArICRtZWRpYS1xdWVyeX0ge1xuICAgICAgICAgICAgQGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8vLyBBZGQgYSBicmVha3BvaW50XG5AbWl4aW4gbXEtYWRkLWJyZWFrcG9pbnQoJG5hbWUsICR3aWR0aCkge1xuICAgICRuZXctYnJlYWtwb2ludDogKCRuYW1lOiAkd2lkdGgpO1xuICAgICRtcS1icmVha3BvaW50czogbWFwLW1lcmdlKCRtcS1icmVha3BvaW50cywgJG5ldy1icmVha3BvaW50KSAhZ2xvYmFsO1xufVxuXG4vLy8gU2hvdyB0aGUgYWN0aXZlIGJyZWFrcG9pbnQgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIHZpZXdwb3J0XG5AbWl4aW4gbXEtc2hvdy1icmVha3BvaW50cygkc2hvdy1icmVha3BvaW50czogJG1xLXNob3ctYnJlYWtwb2ludHMsICRicmVha3BvaW50czogJG1xLWJyZWFrcG9pbnRzKSB7XG4gICAgYm9keTpiZWZvcmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmOGUzO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2ZiZWVkNTtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZmJlZWQ1O1xuICAgICAgICBjb2xvcjogI2MwOTg1MztcbiAgICAgICAgZm9udDogc21hbGwtY2FwdGlvbjtcbiAgICAgICAgcGFkZGluZzogM3B4IDZweDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgICAgIHBvc2l0aW9uOiBmaXhlZDtcbiAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgei1pbmRleDogMTAwO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgYnJlYWtwb2ludHMgdGhhdCBzaG91bGQgYmUgc2hvd25cbiAgICAgICAgQGVhY2ggJHNob3ctYnJlYWtwb2ludCBpbiAkc2hvdy1icmVha3BvaW50cyB7XG4gICAgICAgICAgICAkd2lkdGg6IG1xLWdldC1icmVha3BvaW50LXdpZHRoKCRzaG93LWJyZWFrcG9pbnQsICRicmVha3BvaW50cyk7XG5cbiAgICAgICAgICAgIEBpbmNsdWRlIG1xKCRzaG93LWJyZWFrcG9pbnQsICRicmVha3BvaW50czogJGJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogXCIjeyRzaG93LWJyZWFrcG9pbnR9IOKJpSAjeyR3aWR0aH0gKCN7bXEtcHgyZW0oJHdpZHRoKX0pXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkBpZiBsZW5ndGgoJG1xLXNob3ctYnJlYWtwb2ludHMpID4gMCB7XG4gICAgQGluY2x1ZGUgbXEtc2hvdy1icmVha3BvaW50cztcbn1cbiIsImh0bWwsXG5ib2R5IHtcbiAgICBoZWlnaHQ6IDEwMCU7XG59XG5cbmJvZHkge1xuICAgIGNvbG9yOiAjOGY4ZjhmO1xuICAgIGZvbnQtZmFtaWx5OiAnQXZlbmlyIE5leHQgTFQgUHJvJztcbiAgICBmb250LXdlaWdodDogMzAwO1xuICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xufVxuIiwiLm1lbnUtdG9nZ2xlIHtcbiAgICB3aWR0aDogNDBweDtcbiAgICBoZWlnaHQ6IDMwcHg7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMjBweDtcbiAgICBsZWZ0OiAyNXB4O1xuICAgIGN1cnNvcjogcG9pbnRlcjtcblxuICAgICYub24ge1xuICAgICAgICAub25lIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zZm9ybShyb3RhdGUoNDVkZWcpIHRyYW5zbGF0ZSg3cHgsIDdweCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLnR3byB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRocmVlIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRyYW5zZm9ybShyb3RhdGUoLTQ1ZGVnKSB0cmFuc2xhdGUoOHB4LCAtMTBweCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4ub25lLFxuLnR3byxcbi50aHJlZSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiA1cHg7XG4gICAgYmFja2dyb3VuZDogIzMwNDNhMDtcbiAgICBtYXJnaW46IDZweCBhdXRvO1xuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcblxuICAgIEBpbmNsdWRlIHRyYW5zaXRpb24tZHVyYXRpb24oMC4zcyk7XG59XG5cbm5hdiB1bCB7XG4gICAgbWFyZ2luOiAwO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgZm9udC1mYW1pbHk6IE9wZW4gU2FucztcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIG1hcmdpbjogNGVtIGF1dG87XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuXG4gICAgJi5oaWRkZW4ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIGEge1xuICAgICAgICBAaW5jbHVkZSB0cmFuc2l0aW9uLWR1cmF0aW9uKDAuNXMpO1xuXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgY29sb3I6IHdoaXRlO1xuICAgICAgICBmb250LXNpemU6IDNlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIuNTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgICAgICY6aG92ZXIge1xuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4ubWVudS1zZWN0aW9uIHtcbiAgICAmLm9uIHtcbiAgICAgICAgei1pbmRleDogMTA7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuOSk7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB9XG59XG4iLCJAaW1wb3J0IFwiLi4vc3VwcG9ydFwiO1xuXG4vLyBUaGlzIG1peGluIHByb3ZpZGVzIGJhc2ljIHN1cHBvcnQgZm9yIENTUzMgcHJvcGVydGllcyBhbmRcbi8vIHRoZWlyIGNvcnJlc3BvbmRpbmcgZXhwZXJpbWVudGFsIENTUzIgcHJvcGVydGllcyB3aGVuXG4vLyB0aGUgaW1wbGVtZW50YXRpb25zIGFyZSBpZGVudGljYWwgZXhjZXB0IGZvciB0aGUgcHJvcGVydHlcbi8vIHByZWZpeC5cbkBtaXhpbiBleHBlcmltZW50YWwoJHByb3BlcnR5LCAkdmFsdWUsXG4gICRtb3ogICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbW96aWxsYSxcbiAgJHdlYmtpdCAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci13ZWJraXQsXG4gICRvICAgICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itb3BlcmEsXG4gICRtcyAgICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbWljcm9zb2Z0LFxuICAka2h0bWwgICAgOiAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLWtodG1sLFxuICAkb2ZmaWNpYWwgOiB0cnVlXG4pIHtcbiAgQGlmICR3ZWJraXQgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLXdlYmtpdCAgICB7IC13ZWJraXQtI3skcHJvcGVydHl9IDogJHZhbHVlOyB9XG4gIEBpZiAka2h0bWwgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1raHRtbCAgICAgeyAgLWtodG1sLSN7JHByb3BlcnR5fSA6ICR2YWx1ZTsgfVxuICBAaWYgJG1veiAgICAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbW96aWxsYSAgIHsgICAgLW1vei0jeyRwcm9wZXJ0eX0gOiAkdmFsdWU7IH1cbiAgQGlmICRtcyAgICAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLW1pY3Jvc29mdCB7ICAgICAtbXMtI3skcHJvcGVydHl9IDogJHZhbHVlOyB9XG4gIEBpZiAkbyAgICAgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1vcGVyYSAgICAgeyAgICAgIC1vLSN7JHByb3BlcnR5fSA6ICR2YWx1ZTsgfVxuICBAaWYgJG9mZmljaWFsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgICAgICAgICAjeyRwcm9wZXJ0eX0gOiAkdmFsdWU7IH1cbn1cblxuLy8gU2FtZSBhcyBleHBlcmltZW50YWwoKSwgYnV0IGZvciBjYXNlcyB3aGVuIHRoZSBwcm9wZXJ0eSBpcyB0aGUgc2FtZSBhbmQgdGhlIHZhbHVlIGlzIHZlbmRvcml6ZWRcbkBtaXhpbiBleHBlcmltZW50YWwtdmFsdWUoJHByb3BlcnR5LCAkdmFsdWUsXG4gICRtb3ogICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbW96aWxsYSxcbiAgJHdlYmtpdCAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci13ZWJraXQsXG4gICRvICAgICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itb3BlcmEsXG4gICRtcyAgICAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbWljcm9zb2Z0LFxuICAka2h0bWwgICAgOiAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLWtodG1sLFxuICAkb2ZmaWNpYWwgOiB0cnVlXG4pIHtcbiAgQGlmICR3ZWJraXQgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLXdlYmtpdCAgICB7ICN7JHByb3BlcnR5fSA6IC13ZWJraXQtI3skdmFsdWV9OyB9XG4gIEBpZiAka2h0bWwgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1raHRtbCAgICAgeyAjeyRwcm9wZXJ0eX0gOiAgLWtodG1sLSN7JHZhbHVlfTsgfVxuICBAaWYgJG1veiAgICAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbW96aWxsYSAgIHsgI3skcHJvcGVydHl9IDogICAgLW1vei0jeyR2YWx1ZX07IH1cbiAgQGlmICRtcyAgICAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLW1pY3Jvc29mdCB7ICN7JHByb3BlcnR5fSA6ICAgICAtbXMtI3skdmFsdWV9OyB9XG4gIEBpZiAkbyAgICAgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1vcGVyYSAgICAgeyAjeyRwcm9wZXJ0eX0gOiAgICAgIC1vLSN7JHZhbHVlfTsgfVxuICBAaWYgJG9mZmljaWFsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgI3skcHJvcGVydHl9IDogICAgICAgICAjeyR2YWx1ZX07IH1cbn1cbiIsIi5oZXJvIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi5oZXJvIC5hbHBoYS1iZyB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBvYmplY3QtZml0OiBjb3ZlcjtcbiAgICBvcGFjaXR5OiAwLjU7XG59XG5cbi5oZXJvIC53cmFwcGVyIHtcbiAgICBtYXgtd2lkdGg6IDI1cmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xufVxuXG4uaGVybyBoMSB7XG4gICAgY29sb3I6IGJsYWNrO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc2l6ZTogNHJlbTtcbiAgICBtYXJnaW4tbGVmdDogMS4ycmVtO1xuXG4gICAgQGluY2x1ZGUgbXEoJGZyb206IHRhYmxldCwgJHVudGlsOiB0YWJsZXRMYXJnZSkge1xuICAgICAgICBmb250LXNpemU6IDVyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAxLjVyZW07XG4gICAgfVxuXG5cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogdGFibGV0TGFyZ2UsICR1bnRpbDogZGVza3RvcCkge1xuICAgICAgICBmb250LXNpemU6IDYuNXJlbTtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDJyZW07XG4gICAgfVxuXG5cbiAgICBAaW5jbHVkZSBtcSgkZnJvbTogZGVza3RvcCkge1xuICAgICAgICBmb250LXNpemU6IDhyZW07XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAycmVtO1xuICAgIH1cbn1cblxuLy8gLndyYXBwZXIge1xuLy8gICAgIG1heC13aWR0aDogMjVyZW07XG4vLyAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuLy8gICAgIHotaW5kZXg6IDEwO1xuLy8gICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbi8vICAgICB0b3A6IDUwJTtcbi8vIH1cblxuLmNvbG9yLWVtcGhhc2lzIHtcbiAgICBjb2xvcjogIzMwNDNhMDtcbn1cbiJdfQ== */
