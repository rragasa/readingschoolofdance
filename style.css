/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */@import url(node_modules/basscss/css/basscss.css);html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}table{border-collapse:collapse;border-spacing:0}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Demi.eot);src:url(fonts/AvenirNextLTPro-Demi.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Demi.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Demi.woff) format("woff"),url(fonts/AvenirNextLTPro-Demi.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Demi.svg#AvenirNextLTPro-Demi) format("svg");font-weight:400;font-style:normal}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-It.eot);src:url(fonts/AvenirNextLTPro-It.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-It.woff2) format("woff2"),url(fonts/AvenirNextLTPro-It.woff) format("woff"),url(fonts/AvenirNextLTPro-It.ttf) format("truetype"),url(fonts/AvenirNextLTPro-It.svg#AvenirNextLTPro-It) format("svg");font-weight:400;font-style:italic}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-DemiIt.eot);src:url(fonts/AvenirNextLTPro-DemiIt.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-DemiIt.woff2) format("woff2"),url(fonts/AvenirNextLTPro-DemiIt.woff) format("woff"),url(fonts/AvenirNextLTPro-DemiIt.ttf) format("truetype"),url(fonts/AvenirNextLTPro-DemiIt.svg#AvenirNextLTPro-DemiIt) format("svg");font-weight:400;font-style:italic}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Regular.eot);src:url(fonts/AvenirNextLTPro-Regular.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Regular.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Regular.woff) format("woff"),url(fonts/AvenirNextLTPro-Regular.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Regular.svg#AvenirNextLTPro-Regular) format("svg");font-weight:400;font-style:normal}@font-face{font-family:Avenir Next LT Pro;src:url(fonts/AvenirNextLTPro-Bold.eot);src:url(fonts/AvenirNextLTPro-Bold.eot?#iefix) format("embedded-opentype"),url(fonts/AvenirNextLTPro-Bold.woff2) format("woff2"),url(fonts/AvenirNextLTPro-Bold.woff) format("woff"),url(fonts/AvenirNextLTPro-Bold.ttf) format("truetype"),url(fonts/AvenirNextLTPro-Bold.svg#AvenirNextLTPro-Bold) format("svg");font-weight:700;font-style:normal}.row{width:100%;max-width:1024px;margin:0 auto;position:relative;padding:0 2%}.gigantic{font-size:11rem}.supersize{font-size:8rem}.tera{font-size:6.5rem;margin-bottom:.25385rem}.giga{font-size:5rem;margin-bottom:.33rem}.mega{font-size:4rem;margin-bottom:.4125rem}.alpha{font-size:3.33333rem;margin-bottom:.495rem}.beta{font-size:2.6667rem;margin-bottom:.61875rem}.gamma{font-size:2rem;margin-bottom:.825rem}.delta{font-size:1.3333333333333333rem;margin-bottom:1.2375rem}.epsilon{font-size:1.16667rem;margin-bottom:1.41429rem}.zeta{font-size:1rem;margin-bottom:1.65rem}.montserrat{font-family:Montserrat}@media (min-width:320px){.xs-col{float:left;box-sizing:border-box}.xs-col-right{float:right;box-sizing:border-box}.xs-col-1{width:8.33333%}.xs-col-2{width:16.66667%}.xs-col-3{width:25%}.xs-col-4{width:33.33333%}.xs-col-5{width:41.66667%}.xs-col-6{width:50%}.xs-col-7{width:58.33333%}.xs-col-8{width:66.66667%}.xs-col-9{width:75%}.xs-col-10{width:83.33333%}.xs-col-11{width:91.66667%}.xs-col-12{width:100%}}body,html{height:100%}body{color:#8f8f8f;font-family:Avenir Next LT Pro;font-weight:300;-webkit-font-smoothing:antialiased}.menu-toggle{width:40px;height:30px;position:absolute;top:20px;left:25px;cursor:pointer}.menu-toggle.on .one{-webkit-transform:rotate(45deg) translate(7px,7px);transform:rotate(45deg) translate(7px,7px)}.menu-toggle.on .two{opacity:0}.menu-toggle.on .three{-webkit-transform:rotate(-45deg) translate(8px,-10px);transform:rotate(-45deg) translate(8px,-10px)}.one,.three,.two{width:100%;height:5px;background:#3043a0;margin:6px auto;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition-duration:.3s}nav ul{padding:0;font-family:Open Sans;list-style:none;margin:4em auto;text-align:center}nav ul.hidden{display:none}nav ul a{transition-duration:.5s;text-decoration:none;color:#fff;font-size:3em;line-height:2.5;width:100%;display:block}nav ul a:hover{background-color:rgba(0,0,0,.5)}.menu-section.on{z-index:10;width:100%;height:100%;display:block;background-color:rgba(0,0,0,.5);position:absolute}.hero{overflow:hidden;position:relative}.hero,.hero .alpha-bg{width:100%;height:100%}.hero .alpha-bg{position:absolute;-o-object-fit:cover;object-fit:cover;opacity:.5}.hero h1{color:#000;font-weight:700;font-size:4rem;margin-left:1.2rem}@media (min-width:33.75em) and (max-width:44.99em){.hero h1{font-size:5rem;margin-left:1.5rem}}@media (min-width:45em) and (max-width:59.99em){.hero h1{font-size:6.5rem;margin-left:2rem}}@media (min-width:60em){.hero h1{font-size:8rem;margin-left:2rem}}.wrapper{max-width:25rem;position:relative;z-index:10;-webkit-transform:translateY(-50%);transform:translateY(-50%);top:50%}.color-emphasis{color:#3043a0}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
